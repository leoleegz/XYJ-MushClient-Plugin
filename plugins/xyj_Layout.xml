<?xml version="1.0" encoding="gb2312"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 27, 2010, 6:32 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "xyj_Layout" generated by Plugin Wizard -->

<muclient>

<plugin
   name="XiYouJi_Main_Layout"
   author="Lasher/Li Ying"
   id="ff8121107ba30b558ce6fb67"
   language="Lua"
   purpose="Layout XiYouJi Main Screen"
   date_written="2010-12-19 23:32:06"
   requires="4.56"
   version="1.1"
   save_state="y"
   >
</plugin>

<aliases>
<alias
   script="resetaard"
   match="^resetaard"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
  >
  </alias>
  

  <alias
   match="#alias {*} {*}"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>

require "addxml"  -- addxml extension

-- add the alias

addxml.alias {  
  match = "%1", 
  send = "%2",
  sequence = 100,
  enabled = true,
  name = "%1",
  send_to = 10,
  group = "speedwalks"
               }

ColourNote ("white", "green", "Added alias to match on '%1', sending '%2'")
</send>
  </alias>

  <alias
   match="#action {*} {*}"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

require "addxml"  -- addxml extension

-- add the trigger 

addxml.trigger {  
  match = "%1", 
  send = "%2",
  sequence = 100,
  enabled = true,
               }

ColourNote ("white", "green", "Added trigger to match on '%1', sending '%2'")
</send>
  </alias>

  <alias
   match="#trigger {*} {*}"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

require "addxml"  -- addxml extension

-- add the trigger 

addxml.trigger {  
  match = "%1", 
  send = "%2",
  sequence = 100,
  enabled = true,
               }

ColourNote ("white", "green", "Added trigger to match on '%1', sending '%2'")
</send>
  </alias>

</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<script>
<![CDATA[

--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
orig_height      = 400  -- saves old height when we collapse window.
default_textrect = 1    -- start with default textrec.
MIN_SIZE         = 50

function debugp(source,hsid)
print("------------------------------------------------------------------------------")
print("Called FROM : " .. source .. "     HOTSPOT ID: " .. hsid)
print("Textrect_top: " .. textrect_top .. " Textrect_left: " .. textrect_left)
print("Textrect_bot: " .. textrect_bottom .. " Textrect_right: " .. textrect_right)
print("startx:  " .. startx .. "   starty:  " .. starty)
print("posx:  " .. posx.. "   posy: " .. posy)
print("------------------------------------------------------------------------------")
end

function ResizeMainCallback()
   posx, posy = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   textrect_right = textrect_right + posx - startx
   startx = posx
   if ( textrect_right-textrect_left < MIN_SIZE) then
         textrect_right = textrect_left+MIN_SIZE
         startx = textrect_right
   elseif (textrect_right > GetInfo(281)-7) then
         textrect_right = GetInfo(281)-7
         startx = textrect_right
   end
   
   textrect_bottom = textrect_bottom + posy - starty
   starty = posy
   if ( textrect_bottom-textrect_top < MIN_SIZE) then
      textrect_bottom = textrect_top+MIN_SIZE
      starty = textrect_bottom
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      starty = textrect_bottom
   end

   default_textrect = 0 -- we moved something, no longer on autopilot.
   draw_main_window()
   add_title_dragger()
   
   --- Reposition the resize tag.
   WindowPosition(textResizer, textrect_right - rstagsize+5, textrect_bottom - rstagsize+5, 0, 6)

end

function DragMainCallback()

   posx, posy = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   --debugp("ResizeMain","dragmaincallback")
   local height = GetInfo(293) - GetInfo(291)
   local width = GetInfo(292) - GetInfo(290)
   
   textrect_left = textrect_left + posx - startx
   textrect_right = textrect_left + width
   if (textrect_left <= 7) then
      textrect_left = 7
      textrect_right = textrect_left + width
   elseif (textrect_right >= GetInfo(281)-7) then
      textrect_right = GetInfo(281)-7
      textrect_left = textrect_right - width
   else
      startx = posx
   end
  
   textrect_top = textrect_top + posy - starty
   textrect_bottom = textrect_top+height
   starty = posy
   if (textrect_top < 7) then
      textrect_top = 7
      starty = textrect_top
      textrect_bottom = textrect_top+height
   elseif (textrect_bottom > GetInfo(280)-7) then
      textrect_bottom = GetInfo(280)-7
      textrect_top = textrect_bottom-height
      starty = textrect_top
   end

   default_textrect = 0 -- we moved something, no longer on autopilot.
   draw_main_window()
   add_main_resizer()
   --- Reposition the dragger tag.
   WindowPosition(textDragger, textrect_left-6, textrect_top-7, 0, 6)

end


---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
    --debugp("ResizeReleaseCallback()","")
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if  (hotspot_id == "resizemain") then
      startx, starty = WindowInfo (textResizer, 17), WindowInfo (textResizer, 18)
   elseif (hotspot_id == "dragmain") then
      startx, starty = WindowInfo (textDragger, 17), WindowInfo (textDragger, 18)
   end
   --debugp("mousedown",hotspot_id)

end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
   --debugp("CancelMouseDown")
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()

   --- Pull some state variables.
   SetVariable("defaulttr",default_textrect)

   if (default_textrect == 0) then
      SetVariable("trleft",textrect_left)
      SetVariable("trright",textrect_right)
      SetVariable("trtop",textrect_top)
      SetVariable("trbottom",textrect_bottom)
  else
      DeleteVariable("trleft")
      DeleteVariable("trright")
      DeleteVariable("trtop")
      DeleteVariable("trbottom")
  end
end -- OnPluginSaveState

function resetaard() 
   default_textrect = 1
   OnPluginSaveState()
   check_main_background()
end

function OnPluginDisable ()
    WindowShow( textDragger, false )
    WindowShow( textResizer, false )
    WindowShow( bgwin, false)
end --  OnPluginDisable

function OnPluginEnable ()
    WindowShow( textDragger, true )
    WindowShow( textResizer, true )
    WindowShow( bgwin, true)
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall() 

   --- Get a unique name for main window and resizer window.
   win = GetPluginID ()  -- get a unique name
   textDragger = "      "..win.."txtdragger"
   textResizer = "      "..win.."txtresize"

   local dir = GetInfo(66)
   local imgpath = dir .. "worlds\\plugins\\images\\bg1.png"
   SetBackgroundImage(imgpath,13)

   --- Pull some state variables.
   default_textrect  = tonumber (GetVariable ("defaulttr")) or default_textrect

   if (default_textrect == 0) then
      textrect_top = tonumber(GetVariable("trtop")) or 22
      textrect_bottom = tonumber(GetVariable("trbottom")) or 400
      textrect_left = tonumber(GetVariable("trleft")) or 200
      textrect_right = tonumber(GetVariable("trright")) or 200 + GetInfo(213) * 90
   end  

   -- give main world window time to stabilize its size and position
   check_main_background()
   DoAfterSpecial(2,"check_main_background()",12)
end

function check_main_background()

   if (default_textrect == 1) then
      textrect_left   = 1
      textrect_top    = 22
      textrect_right  = textrect_left + GetInfo(213) * 90 -- Sized for 90 chars
      textrect_bottom = GetInfo(280) - 90 -- Client window height - 90
  end -- assume if textrec isn't default, it is set.

  draw_main_window()
  add_main_resizer()
  add_title_dragger()
end

function add_main_resizer()

   -- Add another mini-window in bottom right corner for resizer tag.
   rstagsize = 15
   check (WindowCreate (textResizer, textrect_right - rstagsize+5, textrect_bottom - rstagsize+5, 
                rstagsize, rstagsize,
                12  , 2, 0x000000))

   -- draw the resize widget bottom right corner.
   WindowLine(textResizer, rstagsize-1, rstagsize-0, rstagsize-0, rstagsize-1, 0xffffff, 0, 2)
   WindowLine(textResizer, rstagsize-2, rstagsize-0, rstagsize-0, rstagsize-2, 0x696969, 0, 1)
   WindowLine(textResizer, rstagsize-4, rstagsize-0, rstagsize-0, rstagsize-4, 0xffffff, 0, 2)
   WindowLine(textResizer, rstagsize-5, rstagsize-0, rstagsize-0, rstagsize-5, 0x696969, 0, 1)
   WindowLine(textResizer, rstagsize-7, rstagsize-0, rstagsize-0, rstagsize-7, 0xffffff, 0, 2)
   WindowLine(textResizer, rstagsize-8, rstagsize-0, rstagsize-0, rstagsize-8, 0x696969, 0, 1)
   WindowLine(textResizer, rstagsize-10, rstagsize-0, rstagsize-0, rstagsize-10, 0xffffff, 0, 2)
   WindowLine(textResizer, rstagsize-11, rstagsize-0, rstagsize-0, rstagsize-11, 0x696969, 0, 1)
   WindowLine(textResizer, rstagsize-12, rstagsize-0, rstagsize-0, rstagsize-12, 0xffffff, 0, 1)
   WindowLine(textResizer, rstagsize-13, rstagsize-0, rstagsize-0, rstagsize-13, 0xffffff, 0, 1)

   -- Add a drag handler to this window, effectively allows textrectangle to be resized.
   WindowAddHotspot(textResizer, "resizemain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
   WindowDragHandler(textResizer, "resizemain", "ResizeMainCallback", "ResizeReleaseMainCallback", 0)
   WindowShow(textResizer)

end

function add_title_dragger() 

   -- Add another mini-window at top for dragging bar.
   dragsize = 10
   check (WindowCreate (textDragger, textrect_left-6, textrect_top-6, textrect_right - textrect_left+11, dragsize, 12, 2, 0x000000))
   WindowShow(textDragger,true)

   WindowAddHotspot(textDragger, "dragmain", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
   WindowDragHandler(textDragger, "dragmain", "DragMainCallback", "DragReleaseMainCallback", 0)

end
   
function draw_main_window()

   TextRectangle(textrect_left, textrect_top, textrect_right, textrect_bottom,
              5,  -- BorderOffset, 
              ColourNameToRGB ("darkgray"),    -- BorderColour, 
              2,  -- BorderWidth, 
              ColourNameToRGB ("darkslategray"),  -- OutsideFillColour, 
              0) -- OutsideFillStyle (fine hatch)

   -- Add a mini-window under main text area so background won't mess it up.
   bgwin = "text_background"
   check (WindowCreate (bgwin, textrect_left - 3, textrect_top - 3, 
                textrect_right-textrect_left + 6, textrect_bottom - textrect_top + 6,
                12  , 3, 0x000000)) 
   WindowShow(bgwin)

   --[[
   local dir = GetInfo(66)
   imgpath = dir .. "worlds\\plugins\\images\\aardbg13.png"
   WindowLoadImage(bgwin, "wolf_logo", imgpath)

   trwidth = GetInfo(274) - GetInfo(272)
   trheight = GetInfo(275) - GetInfo(273)
   xpos = 0 
   ypos = 0

   if trwidth > 500 then
      xpos = (trwidth - 500) / 2
   end

   if trheight > 500 then
      ypos = (trheight - 500) / 2
   end
   WindowDrawImage (bgwin, "wolf_logo", xpos, ypos, 0, 0, miniwin.image_copy)  -- straight copy
   --]]
end

]]>


</script>
</muclient>
